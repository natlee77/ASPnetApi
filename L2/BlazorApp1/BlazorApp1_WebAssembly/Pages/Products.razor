@page "/products"
@using BlazorApp1_WebAssembly.Models
@inject HttpClient Http


<h3>Products</h3>
<p>This component demonstrates fetching data from the WebApi Azure server.</p>
 
<button class="btn btn-secondary mb-4"  @onclick="GetProductAsync">Take product </button>



<div class="accordion" id="accordionExample">
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingOne">
            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                Accordion Item #1
            </button>
        </h2>
        <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                <strong>This is the first item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
            </div>
        </div>
    </div>
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingTwo">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                Accordion Item #2
            </button>
        </h2>
        <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
            </div>
        </div>
    </div>
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingThree">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                Accordion Item #3
            </button>
        </h2>
        <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
            </div>
        </div>
    </div>
</div>














@if (products == null)
{
    <p><em>No product found...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Product Name</th>
                <th>ShortDescription</th>
               @* <th>LongDescription</th>*@
                <th>Price</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var product in products)
            {
            <tr>
                <td>@product.Id  </td>
                <td>@product.Name </td>
                <td>@product.ShortDescription  </td>
               @* <td>@product.  </td>*@
                <td>@product.Price  </td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    private Models.Product[] products;//model product

    private async Task GetProductAsync()//att updatera nån - bättre det v., slippa gå to sida
    {
        products = await Http.GetFromJsonAsync<Models.Product[]>("https://recapwebapi.azurewebsites.net/api/products ");
    }//++ knapp -ladd manuel

    protected override async Task OnInitializedAsync()//det körs när sida laddas -ladda automatisk
    {

        //products = await Http.GetFromJsonAsync<Product[]>("https://recapwebapi.azurewebsites.net/api/products ");
        //await GetProductAsync();
    }

    //public class Product
    //{
    //    public long Id { get; set; }
    //    public string Name { get; set; }
    //    public string ShortDescription { get; set; }
    //    public string LongDescription { get; set; }
    //    public decimal Price { get; set; }
    //}
}

